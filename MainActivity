package com.example.mykot

/*
This file is for navigation for other file. Serves as the main screen. Navigation,
clickable profile image for editing profile and dark mode switch.
*/

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.Image
import androidx.compose.foundation.border
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.unit.dp
import androidx.navigation.NavController
import androidx.navigation.compose.NavHost
import androidx.navigation.compose.composable
import androidx.navigation.compose.rememberNavController
import com.example.mykot.ui.theme.MyKotTheme

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            var isDarkTheme by remember { mutableStateOf(false) }
            var profileName by remember { mutableStateOf("Dwayne Andrei Tan") }

            MyKotTheme(darkTheme = isDarkTheme) {
                val navController = rememberNavController()

                Surface(color = MaterialTheme.colorScheme.background) {
                    NavHost(navController = navController, startDestination = "home") {
                        composable("home") {
                            HomeScreen(
                                navController = navController,
                                isDarkTheme = isDarkTheme,
                                onThemeToggle = { isDarkTheme = it },
                                profileName = profileName
                            )
                        }
                        composable("editProfile") {
                            EditProfileScreen(
                                navController = navController,
                                currentName = profileName,
                                onNameChange = { profileName = it }
                            )
                        }
                        composable("groceryDetail/{listName}") { backStackEntry ->
                            val listName = backStackEntry.arguments?.getString("listName") ?: ""
                            GroceryDetailScreen(navController, listName)
                        }
                        composable("addItem/{listName}") { backStackEntry ->
                            val listName = backStackEntry.arguments?.getString("listName") ?: ""
                            AddItemScreen(navController, listName)
                        }
                    }
                }
            }
        }
    }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun HomeScreen(
    navController: NavController,
    isDarkTheme: Boolean,
    onThemeToggle: (Boolean) -> Unit,
    profileName: String
) {
    val groceryLists = listOf("Budget List", "Food List", "Household List")

    Scaffold(
        topBar = {
            TopAppBar(
                title = { Text("Lista") },
                actions = {
                    Row(verticalAlignment = Alignment.CenterVertically) {
                        Text("Dark", modifier = Modifier.padding(end = 4.dp))
                        Switch(
                            checked = isDarkTheme,
                            onCheckedChange = { onThemeToggle(it) }
                        )
                    }
                },
                colors = TopAppBarDefaults.topAppBarColors(
                    containerColor = MaterialTheme.colorScheme.primaryContainer
                )
            )
        },
        containerColor = MaterialTheme.colorScheme.background
    ) { padding ->
        Surface(
            modifier = Modifier
                .padding(padding)
                .fillMaxSize(),
            color = MaterialTheme.colorScheme.background
        ) {
            Column(
                modifier = Modifier.padding(16.dp),
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                Image(
                    painter = painterResource(id = R.drawable.profile),
                    contentDescription = "Profile Image",
                    modifier = Modifier
                        .size(100.dp)
                        .clip(CircleShape)
                        .border(2.dp, Color.Gray, CircleShape)
                        .clickable { navController.navigate("editProfile") }
                )

                Spacer(modifier = Modifier.height(8.dp))
                Text(profileName, style = MaterialTheme.typography.headlineSmall)
                Spacer(modifier = Modifier.height(24.dp))

                Text("Grocery Lists", style = MaterialTheme.typography.titleMedium)

                groceryLists.forEach { listName ->
                    OutlinedCard(
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(vertical = 8.dp)
                            .clickable { navController.navigate("groceryDetail/$listName") }
                    ) {
                        Text(
                            text = listName,
                            modifier = Modifier.padding(16.dp)
                        )
                    }
                }

                Spacer(modifier = Modifier.height(32.dp))
                Divider(color = Color.Gray, thickness = 1.dp)
                Spacer(modifier = Modifier.height(8.dp))

                Card(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(horizontal = 6.dp, vertical = 12.dp)
                        .border(
                            width = 1.dp,
                            color = Color.LightGray,
                            shape = MaterialTheme.shapes.medium
                        ),
                    colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.surface),
                    shape = MaterialTheme.shapes.medium
                ) {
                    Column(
                        modifier = Modifier.padding(12.dp),
                        horizontalAlignment = Alignment.CenterHorizontally
                    ) {
                        Image(
                            painter = painterResource(id = R.drawable.ads),
                            contentDescription = "Advertisement",
                            modifier = Modifier
                                .fillMaxWidth()
                                .height(240.dp)
                                .clip(MaterialTheme.shapes.medium)
                        )
                        Spacer(modifier = Modifier.height(8.dp))
                        Text(
                            text = "Advertisement",
                            style = MaterialTheme.typography.labelSmall,
                            color = Color.Gray
                        )
                    }
                }
            }
        }
    }
}
